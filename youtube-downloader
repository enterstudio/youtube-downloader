#!/usr/bin/env ruby
$KCODE='u'
require 'open-uri'
require 'ftools'
require 'yaml'
require 'readline'
require 'shellwords'

begin
  ConfigYT = YAML::load_file(File.join(ENV['HOME'], '.youtube-downloader'))
rescue Errno::ENOENT
  STDERR.puts "No configuration file found, please copy one."
  STDERR.puts "  cp #{File.dirname(__FILE__)}/.youtube-downloader ~/"
  exit 1
end


if ARGV.empty? or ARGV[0].match(/(-h)|((--)?help)/i)
  puts "Usage: #{$0.split(/\//)[-1]} <youtube url> [command]"
  puts "Where command is one of the following:"
  puts "\t audio     - download movie, rip audio, remove movie"
  puts "\t all / rip - download movie and rip audio"
  puts "\t no command given will download the movie"
  puts ''
  exit 0
elsif not ARGV[0].match(/youtube/)
  puts "No valid youtube url supplied"
  exit 1
end

Video = Struct.new(:title, :video_id, :id) do
  def to_s
    "http://youtube.com/get_video.php?t=#{id}&video_id=#{video_id}&fmt=18"
  end

  def empty?
    @title.nil? and @video_id.nil? and @id.nil?
  end
end

the_vid = Video.new

begin
  open(ARGV[0]) do |f|
    f.each do |l|
      if l.match(/(var swfArgs)/)
        the_vid.id       = l.match(/"t":\s+"([^"]+)/)[1]
        the_vid.video_id = l.match(/"video_id":\s+"([^"]+)/)[1]
      elsif l.match(/<title>/)
        the_vid.title    = l.match(/<title>YouTube - (.*)<\/title>/)[1].gsub(/&amp;/,'&')
      end

      break if not the_vid.empty?
    end
  end
rescue Timeout::Error
  $stderr.puts "Timeout while connecting to: #{ARGV[0]}"
  $stderr.puts 'Retrying...'
  retry
rescue Exception => e
  $stderr.puts e
  $stderr.puts e.backtrace.join("\n")
  exit 1
end

puts 'To edit filename press up arrow'
Readline::HISTORY.push the_vid.title
name = Readline::readline("Filename: [#{the_vid.title}] ") #STDIN.gets.strip
name = if name.empty?
         the_vid.title
       else
         name
       end.shellescape
the_file = "#{ConfigYT[:download_dir]}/#{name}.#{ConfigYT[:file_extension]}"

download_command = case ENV['OSTYPE']
                   when 'darwin' # Mac OS X
                     "/usr/bin/env curl -L -C - -o #{the_file} '#{the_vid}'"
                   when /BSD/i
                     "/usr/bin/env fetch -o #{the_file} '#{the_vid}'"
                   else # Linux and whatever, most people got wget installed!
                     "/usr/bin/env wget '#{the_vid}' -c -O #{the_file}"
                   end

def rip_audio(file, name)
  `/usr/bin/env mkfifo #{ConfigYT[:temp_dir]}/#{name}`
  IO.popen("/usr/bin/env lame -b 160 #{ConfigYT[:temp_dir]}/#{name} #{ConfigYT[:music_dir]}/#{name}.mp3")
  `/usr/bin/env mplayer #{file} -ao pcm:fast:file=#{ConfigYT[:temp_dir]}/#{name} -vc null -vo null`
  `/usr/bin/env rm #{ConfigYT[:temp_dir]}/#{name}`
end

def remove(name)
  `/usr/bin/env rm #{the_file}`
end

case ARGV[1]
when /audio/i       # Just audio
  if File.exist? the_file.to_s
    `#{download_command}`
  else
    `/usr/bin/env mkfifo '#{the_file}'`
    IO.popen(download_command)
  end

  rip_audio(the_file, name)
  remove(name)
when /(all)|(rip)/i # Both audio and video
  `#{download_command}`
  rip_audio(the_file, name)

  `/usr/bin/env touch #{the_file}` if ConfigYT[:touch]
else
  `#{download_command}`
  `/usr/bin/env touch #{the_file}` if ConfigYT[:touch]
end
